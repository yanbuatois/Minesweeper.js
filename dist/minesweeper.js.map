{"version":3,"sources":["webpack://minesweeper.js/webpack/bootstrap","webpack://minesweeper.js/./src/class/Board.js","webpack://minesweeper.js/./src/class/Cell.js","webpack://minesweeper.js/./src/enums/BoardStateEnum.js","webpack://minesweeper.js/./src/enums/CellFlagEnum.js","webpack://minesweeper.js/./src/enums/CellStateEnum.js","webpack://minesweeper.js/./src/minesweeper.js","webpack://minesweeper.js/./src/utils/generateMineArray.js","webpack://minesweeper.js/./src/utils/helpers.js"],"names":["require","isMineArrayValid","generateGridFromMineArray","getNbMines","BoardStateEnum","CellStateEnum","CellFlagEnum","Board","mineArray","Error","_state","PRISTINE","_grid","x","y","tx","ty","_numRows","_numCols","cell","state","OPEN","WON","LOST","flag","IN_PROGRESS","_updateState","floodFill","NONE","isMine","aCoords","_getAdjacentCoords","forEach","openCell","won","line","output","xDiff","yDiff","push","length","grid","module","exports","Cell","numAdjacentMines","_x","_y","_isMine","_numAdjacentMines","CLOSED","_flag","value","_value","EXCLAMATION","QUESTION","generateMineArray","singleToMultidimensionalArray","rows","cols","mines","parseInt","i","sort","Math","random","Array","isArray","array","numCols","multi","slice","map","elt","reduce","previous","getNbAdjacentMines","count","lines","yPlus","xPlus"],"mappings":"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","file":"minesweeper.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/minesweeper.js\");\n","/**\r\n * @module minesweeper.js/Board\r\n */\r\n\r\n/**\r\n * @typedef {Object} Coords Represents coords\r\n * @property {Number} x Coord x\r\n * @property {Number} y Coord y\r\n */\r\n\r\nconst {isMineArrayValid, generateGridFromMineArray, getNbMines} = require('../utils/helpers');\r\nconst BoardStateEnum = require('../enums/BoardStateEnum');\r\nconst CellStateEnum = require('../enums/CellStateEnum');\r\nconst CellFlagEnum = require('../enums/CellFlagEnum');\r\n\r\n/**\r\n * Class which manages the board.\r\n */\r\nclass Board {\r\n  /**\r\n   * @constructor\r\n   * @param {Array<Array<Number>>} mineArray Mines array.\r\n   * @throws {Error} Throw an error if the mine array is invalid;\r\n   * @public\r\n   */\r\n  constructor(mineArray) {\r\n    if (!isMineArrayValid(mineArray)) {\r\n      throw new Error('The mine array supplied to Board constructor was invalid.');\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {Number}\r\n     */\r\n    this._state = BoardStateEnum.PRISTINE;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<Array<Cell>>}\r\n     */\r\n    this._grid = generateGridFromMineArray(mineArray);\r\n  }\r\n\r\n  /**\r\n   * Returns the state of the game.\r\n   * @type {Number}\r\n   * @public\r\n   */\r\n  get state() {\r\n    return this._state;\r\n  }\r\n\r\n  /**\r\n   * Returns the rows number\r\n   * @type {Number}\r\n   * @public\r\n   */\r\n  get numRows() {\r\n    return this._grid.length;\r\n  }\r\n\r\n  /**\r\n   * Get the columns count.\r\n   * @type {Number}\r\n   * @public\r\n   */\r\n  get numCols() {\r\n    return this._grid[0].length;\r\n  }\r\n\r\n  /**\r\n   * Get the mines count.\r\n   * @type {Number}\r\n   * @public\r\n   */\r\n  get numMines() {\r\n    return getNbMines(this.grid);\r\n  }\r\n\r\n  /**\r\n   * Get the grid of the game.\r\n   * @type {Array<Array<Cell>>}\r\n   * @public\r\n   */\r\n  get grid() {\r\n    return this._grid;\r\n  }\r\n\r\n  /**\r\n   * Get a cell from its coords.\r\n   * @param {Number} x X coordinate of the cell.\r\n   * @param {Number} y Y coord of the cell.\r\n   * @return {Cell} The cell.\r\n   * @throws {Error} Will throw an error if the cell isn't on the board.\r\n   */\r\n  cell(x, y) {\r\n    const tx = +x;\r\n    const ty = +y;\r\n    if (tx < 0 || ty < 0 || ty >= this._numRows || tx >= this._numCols) {\r\n      throw new Error(`No cell is present at the coords ${x};${y}.`);\r\n    } else {\r\n      return this._grid[tx][ty];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Change flag status on the cell.\r\n   * @param {Number} x X coords of the cell\r\n   * @param {Number} y Y coords of the cell\r\n   * @throws {Error} Will throw an error if the cell isn't on the board or if the operation isn't authorized (game finished or open case)\r\n   */\r\n  cycleCellFlag(x, y) {\r\n    const cell = this.cell(x, y);\r\n\r\n    if (cell.state === CellStateEnum.OPEN) {\r\n      throw new Error('Case already open.');\r\n    } else if (this._state === BoardStateEnum.WON) {\r\n      throw new Error('You have already won the game.');\r\n    } else if (this._state === BoardStateEnum.LOST) {\r\n      throw new Error('You have already lost the game.');\r\n    }\r\n\r\n    // We use a modulo to make a cycle.\r\n    cell.flag = (cell.flag + 1) % 3;\r\n\r\n    if (this._state === BoardStateEnum.PRISTINE) {\r\n      this._state = BoardStateEnum.IN_PROGRESS;\r\n    }\r\n\r\n    this._updateState();\r\n  }\r\n\r\n  /**\r\n   * Open a case.\r\n   * @param {Number} x X coords of the cell\r\n   * @param {Number} y Y coords of the cell\r\n   * @param {Boolean} [floodFill=false] Floodfill mode.\r\n   * @throws {Error} Throws error if the cell doesn't exist.\r\n   */\r\n  openCell(x, y, floodFill = false) {\r\n    const cell = this.cell(x, y);\r\n\r\n    if (cell.state = CellStateEnum.OPEN || cell.state !== CellFlagEnum.NONE) {\r\n      return;\r\n    }\r\n\r\n    cell.state = CellStateEnum.OPEN;\r\n\r\n    if (!cell.isMine) {\r\n      const aCoords = this._getAdjacentCoords(cell);\r\n      aCoords.forEach(({x, y}) => {\r\n        this.openCell(x, y, true);\r\n      });\r\n    }\r\n\r\n    if (!floodFill) {\r\n      if (this.state === BoardStateEnum.PRISTINE) {\r\n        this._state = BoardStateEnum.IN_PROGRESS;\r\n      }\r\n\r\n      this._updateState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the board situation after a move.\r\n   * @private\r\n   */\r\n  _updateState() {\r\n    let won = true;\r\n    for (const line of this._grid) {\r\n      for (const cell of line) {\r\n        if (cell.state === CellStateEnum.OPEN) {\r\n          if (cell.isMine) {\r\n            this._state = BoardStateEnum.LOST;\r\n            return;\r\n          }\r\n        } else {\r\n          if (!cell.isMine) {\r\n            won = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (won) {\r\n      this._state = BoardStateEnum.WON;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return all coords of adjacent cells.\r\n   * @param {Cell} cell Cell for which we want neighbours.\r\n   * @return {Array<Coords>} The coords list.\r\n   * @private\r\n   */\r\n  _getAdjacentCoords({x, y}) {\r\n    const output = [];\r\n    for (let xDiff = -1; xDiff <= 1; ++xDiff) {\r\n      for (let yDiff = -1; yDiff <= 1; ++yDiff) {\r\n        // Otherwise, we would add coords of the previous cell.\r\n        if (xDiff !== 0 && yDiff !== 0) {\r\n          output.push({\r\n            x: x + xDiff,\r\n            y: y + yDiff,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n}\r\n\r\nmodule.exports = Board;\r\n","/**\r\n * @module minesweeper.js/Cell\r\n */\r\n/**\r\n * @private\r\n * @typedef {Object} CellParams Params passed to the Cell's constructor\r\n * @property {Number} [x=0] X position\r\n * @property {Number} [y=0] Y position\r\n * @property {Number} [isMine=false] True if the cell is a mine.\r\n * @property {Number} [numAdjacentMines=0] Number of adjacent mines.\r\n */\r\n\r\nconst CellFlagEnum = require('../enums/CellFlagEnum');\r\nconst CellStateEnum = require('../enums/CellStateEnum');\r\n\r\n/**\r\n * Represents a cell.\r\n */\r\nclass Cell {\r\n  /**\r\n   * @private\r\n   * @param {CellParams} param0 Settings of the cell.\r\n   */\r\n  constructor({x = 0, y = 0, isMine = false, numAdjacentMines = 0}) {\r\n    /**\r\n     * @type {Number}\r\n     * @private\r\n     */\r\n    this._x = x;\r\n    /**\r\n     * @type {Number}\r\n     * @private\r\n     */\r\n    this._y = y;\r\n    /**\r\n     * @type {Boolean}\r\n     * @private\r\n     */\r\n    this._isMine = isMine;\r\n    /**\r\n     * @type {Number}\r\n     * @private\r\n     */\r\n    this._numAdjacentMines = numAdjacentMines;\r\n\r\n    /**\r\n     * @type {Number}\r\n     * @private\r\n     */\r\n    this._state = CellStateEnum.CLOSED;\r\n\r\n    /**\r\n     * @type {Number}\r\n     * @private\r\n     */\r\n    this._flag = CellFlagEnum.NONE;\r\n  }\r\n\r\n  /**\r\n   * Get x position.\r\n   * @type {Number}\r\n   * @public\r\n   */\r\n  get x() {\r\n    return this._x;\r\n  }\r\n\r\n  /**\r\n   * Get y position.\r\n   * @type {Number}\r\n   * @public\r\n   */\r\n  get y() {\r\n    return this._y;\r\n  }\r\n\r\n  /**\r\n   * Check if there is a mine.\r\n   * @type {Boolean}\r\n   * @public\r\n   */\r\n  get isMine() {\r\n    return this._isMine;\r\n  }\r\n\r\n  /**\r\n   * Number of adjacent mines.\r\n   * @type {Number}\r\n   * @public\r\n   */\r\n  get numAdjacentMines() {\r\n    return this._numAdjacentMines;\r\n  }\r\n\r\n  /**\r\n   * State of the cell.\r\n   * @type {Number}\r\n   * @public\r\n   */\r\n  get state() {\r\n    return this._state;\r\n  }\r\n\r\n  /**\r\n   * Flag on the cell.\r\n   * @type {Number}\r\n   * @public\r\n   */\r\n  get flag() {\r\n    return this._flag;\r\n  }\r\n\r\n  /**\r\n   * Set the state of the case.\r\n   * @param {Number} value New value.\r\n   * @type {Number}\r\n   * @private\r\n   */\r\n  set state(value) {\r\n    this._state = value;\r\n  }\r\n\r\n  /**\r\n   * Set the flag on the case.\r\n   * @param {Number} value New value.\r\n   * @type {Number}\r\n   * @private\r\n   */\r\n  set flag(value) {\r\n    this._value = value;\r\n  }\r\n}\r\n\r\nmodule.exports = Cell;\r\n","/**\r\n * @module minesweeper.js/BoardStateEnum\r\n */\r\n/**\r\n * @readonly\r\n * @enum {Number} Enumeration used to know the status of the game.\r\n */\r\nconst BoardStateEnum = {\r\n  /** The game isn't started */\r\n  PRISTINE: 0,\r\n  /** The game is in progress */\r\n  IN_PROGRESS: 1,\r\n  /** The game is lost. */\r\n  LOST: 2,\r\n  /** The game is won. */\r\n  WON: 3,\r\n};\r\n\r\nmodule.exports = BoardStateEnum;\r\n","/**\r\n * @module minesweeper.js/CellFlagEnum\r\n */\r\n\r\n/**\r\n * @readonly\r\n * @enum {Number} Enumeration used to know if a cell has a flag.\r\n */\r\nconst CellFlagEnum = {\r\n  /** There is none flag. */\r\n  NONE: 0,\r\n  /** There is a flag. */\r\n  EXCLAMATION: 1,\r\n  /** There is a question. */\r\n  QUESTION: 2,\r\n};\r\n\r\nmodule.exports = CellFlagEnum;\r\n","/**\r\n * @module minesweeper.js/CellStateEnum\r\n */\r\n\r\n/**\r\n * @readonly\r\n * @enum {Number} Enumeration about the Cell's state.\r\n */\r\nconst CellStateEnum = {\r\n  /** The cell is closed.*/\r\n  CLOSED: 0,\r\n  /** The cell is open. */\r\n  OPEN: 1,\r\n};\r\n\r\nmodule.exports = CellStateEnum;\r\n","/**\r\n * Minesweeper management module.\r\n * @module minesweeper.js\r\n */\r\n\r\nconst CellStateEnum = require('./enums/CellStateEnum');\r\nconst CellFlagEnum = require('./enums/CellFlagEnum');\r\nconst BoardStateEnum = require('./enums/BoardStateEnum');\r\nconst Board = require('./class/Board');\r\nconst Cell = require('./class/Cell');\r\nconst generateMineArray = require('./utils/generateMineArray');\r\n\r\nconst output = {\r\n  CellStateEnum,\r\n  CellFlagEnum,\r\n  BoardStateEnum,\r\n  Board,\r\n  Cell,\r\n  generateMineArray,\r\n};\r\n\r\nmodule.exports = output;\r\n","/**\r\n * @module minesweeper.js/generateMineArray\r\n */\r\n\r\nconst {singleToMultidimensionalArray} = require('./helpers');\r\n\r\n/**\r\n * @typedef {Object} MineArrayOptions\r\n * @property {Number} [rows=10] Rows count.\r\n * @property {Number} [cols=10] Columns count.\r\n * @property {Number} [mines] Mines count.\r\n */\r\n\r\n/**\r\n * Generate Mine Array from options.\r\n * @param {MineArrayOptions} options Options used to generate the mine array.\r\n * @public\r\n * @return {Array<Array<Number>>} Mine array\r\n */\r\nfunction generateMineArray({rows = 10, cols = 10, mines = parseInt((rows * cols) * 0.15, 10)}) {\r\n  const length = rows * cols;\r\n  const mineArray = [];\r\n\r\n  for (let i = 0; i < length; ++i) {\r\n    if (i < mines) {\r\n      mineArray.push(1);\r\n    } else {\r\n      mineArray.push(0);\r\n    }\r\n  }\r\n\r\n  // I use the sort function to sort the array randomly.\r\n  mineArray.sort(() => 0.5 - Math.random());\r\n\r\n  return singleToMultidimensionalArray(mineArray, cols);\r\n}\r\n\r\nmodule.exports = generateMineArray;\r\n","/**\r\n * @module minesweeper.js/isMineArrayValid\r\n * @private\r\n */\r\n\r\nconst Cell = require('../class/Cell');\r\n\r\n/**\r\n * Test if a mine array is valid.\r\n * @param {Array<Array<Number>>} mineArray Array of mines generated by the function generateMineArray.\r\n * @return {Boolean} True if the array is valid.\r\n * @private\r\n */\r\nfunction isMineArrayValid(mineArray) {\r\n  if (mineArray || !Array.isArray(mineArray) || !mineArray.length) {\r\n    return false;\r\n  }\r\n  const cols = mineArray[0] ? mineArray[0].length : 0;\r\n  if (cols === 0) {\r\n    return false;\r\n  }\r\n  for (const line of mineArray) {\r\n    if (!Array.isArray(line) || line.length !== cols) {\r\n      return false;\r\n    }\r\n    for (const cell of line) {\r\n      if (cell !== 0 && cell !== 1) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Convert an array to two-dimension array.\r\n * @param {Array<Number>} array Number array in one dimension.\r\n * @param {Number} numCols Cols count\r\n * @private\r\n * @return {Array<Array<Number>>} Array in two dimensions.\r\n */\r\nfunction singleToMultidimensionalArray(array, numCols) {\r\n  const multi = [];\r\n\r\n  for (let i = 0; i < array.length; i += numCols) {\r\n    multi.push(array.slice(i, i + numCols));\r\n  }\r\n\r\n  return multi;\r\n}\r\n\r\n/**\r\n * Convert a mine array to a grid.\r\n * @param {Array<Array<Number>>} mineArray Mine array\r\n * @return {Array<Array<Cell>>} Array with cells.\r\n * @private\r\n */\r\nfunction generateGridFromMineArray(mineArray) {\r\n  const grid = mineArray.map((elt, y) =>\r\n    elt.map((cell, x) => new Cell({\r\n      x,\r\n      y,\r\n      isMine: cell === 1,\r\n      numAdjacentMines: (mineArray, x, y),\r\n    }))\r\n  );\r\n  return grid;\r\n}\r\n\r\n/**\r\n * Get mines number from the grid.\r\n * @param {Array<Array<Cell>>} grid Game grid\r\n * @return {Number} Mine count.\r\n */\r\nfunction getNbMines(grid) {\r\n  return grid.reduce((previous, line) => previous + line.reduce((previous, line) => previous + (line.isMine) ? 1 : 0, 0), 0);\r\n}\r\n\r\n/**\r\n * Get the count of adjacent mines around the referenced case.\r\n * @param {Array<Array<Number>>} mineArray Mine array\r\n * @param {Number} x X coord of the reference.\r\n * @param {Number} y Y coord of the reference.\r\n * @return {Number} Mines number.\r\n */\r\nfunction getNbAdjacentMines(mineArray, x, y) {\r\n  let count = 0;\r\n  const lines = mineArray.length;\r\n  const cols = mineArray[0].length;\r\n  for (let yPlus = y - 1; yPlus <= x + 1; ++yPlus) {\r\n    for (let xPlus = x - 1; xPlus <= y + 1; ++xPlus) {\r\n      if ((yPlus !== y || xPlus !== x) && yPlus < lines && xPlus < cols) {\r\n        count += mineArray[y + yPlus][x + xPlus];\r\n      }\r\n    }\r\n  }\r\n\r\n  return count;\r\n}\r\n\r\nmodule.exports = {\r\n  singleToMultidimensionalArray,\r\n  isMineArrayValid,\r\n  generateGridFromMineArray,\r\n  getNbMines,\r\n  getNbAdjacentMines,\r\n};\r\n"],"sourceRoot":""}